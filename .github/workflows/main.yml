name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # 🔹 CI: Integración Continua
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout del código
        uses: actions/checkout@v4

      - name: 📦 Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 📌 Instalar dependencias
        run: npm ci  # Usa `npm install` si no tienes package-lock.json

      - name: 🔍 Linting (ESLint)
        run: npm run lint

      - name: 🧪 Ejecutar tests
        run: npm run test  # Debes tener tests configurados

      - name: 🏗️ Compilar el proyecto (opcional)
        run: npm run build

      - name: 📢 Notificar a Telegram
        if: always()  # Esto hace que se envíe el mensaje siempre, incluso si falla
        run: |
          MESSAGE="🚀 *GitHub Actions* ha terminado.
          - 🆔 *Repo:* ${{ github.repository }}
          - 🔖 *Branch:* ${{ github.ref }}
          - ✅ *Estado:* ${{ job.status }}
          - 🔗 [Ver Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "parse_mode=Markdown" \
          -d "text=$MESSAGE"

  # 🔹 CD: Despliegue Continuo
  cd:
    needs: ci  # Solo se ejecuta si CI pasa correctamente
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout del código
        uses: actions/checkout@v4

      - name: 📦 Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 🚀 Desplegar en Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
